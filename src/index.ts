/*
 * @Author       : È≠èÂ®Å <1209562577@qq.com>
 * @Date         : 2023-07-20 15:02 Âë®4
 * @Description  :
 */
import iq from "inquirer";
// import { TypeInfoList } from "./const";


import {
  simpleGit,
  CleanOptions,
  SimpleGit,
  SimpleGitOptions
} from "simple-git";


/** Êèê‰∫§Á±ªÂûãÂåÖÂê´ÁöÑ‰ø°ÊÅØ */
export interface CommitTypeInfo {
  /** Á±ªÂûã */
  type: string;
  /** Á±ªÂûãÂØπÂ∫îË°®ÊÉÖ */
  emoji: string;
  /** ËØ¶ÊÉÖ */
  detail: string;
}

/** Commmit typeÂÖ®Èáè‰ø°ÊÅØ */
export const TypeInfoList: CommitTypeInfo[] = [
  /** ‰∏ªË¶Åtype
  -------------------------------------- */
  { type: "feat", emoji: "‚ú®", detail: "Â¢ûÂä†Êñ∞ÂäüËÉΩ" },
  { type: "fix", emoji: "üêû", detail: "‰øÆÂ§çbug" },

  /** ÁâπÊÆä
  -------------------------------------- */
  { type: "docs", emoji: "üìÉ", detail: "ÊñáÊ°£Áõ∏ÂÖ≥ÁöÑÂÜÖÂÆπ" },
  { type: "style", emoji: "üíÑ", detail: "‰ª£Á†ÅÊ†ºÂºèÊîπÂä®Ôºå‰∏çÊîπÂèòËØ≠‰πâ" },
  { type: "build", emoji: "üì¶", detail: "ÊûÑÈÄ†Â∑•ÂÖ∑ÊîπÂä®Ôºå‰æãÂ¶ÇwebpackÔºånpm" },
  { type: "refactor", emoji: "üî®", detail: "‰ª£Á†ÅÈáçÊûÑ" },

  /** ÂÖ∂‰ªñ
  -------------------------------------- */
  { type: "test", emoji: "üß™", detail: "Ê∑ªÂä†ÊµãËØïÊàñËÄÖ‰øÆÊîπÁé∞ÊúâÊµãËØï" },
  { type: "perf", emoji: "‚ö°", detail: "ÊèêÈ´òÊÄßËÉΩ" },
  { type: "ci", emoji: "üíª", detail: "‰∏éCIÔºàÊåÅÁª≠ÈõÜÊàêÊúçÂä°ÔºâÊúâÂÖ≥ÁöÑÊîπÂä®" },
  { type: "chore", emoji: "üîß", detail: "ÊûÑÂª∫ËøáÁ®ãÊàñËæÖÂä©Â∑•ÂÖ∑ÁöÑÂèòÂä®" }
];

/** type list */
export const typeList = TypeInfoList.map((info) => info.type);
export const typeWhithEmojiList = TypeInfoList.map(
  (info) => info.emoji + " " + info.type
);


export class GitMananger {
  public constructor() { }

  private static sgInstance: SimpleGit;

  public getInstance(): SimpleGit {
    if (!GitMananger.sgInstance) {
      const options: Partial<SimpleGitOptions> = {
        baseDir: process.cwd(),
        binary: "git",
        maxConcurrentProcesses: 6,
        trimmed: false
      };
      GitMananger.sgInstance = simpleGit(options);
    }
    return GitMananger.sgInstance;
  }

  public commit(msg: string) {
    GitMananger.sgInstance.commit(msg);
  }
}

async function main() {
  const promptValues = await iq.prompt([
    {
      name: "type",
      message: "ÈÄâÊã©Êèê‰∫§Á±ªÂûã",
      type: "list",
      default: "feat",
      pageSize: 12,
      choices: TypeInfoList.map((info) => ({
        name: `${info.emoji} ${info.type}`,
        value: info.type
      }))
    },
    {
      name: 'scope',
      type: 'input',
      message: "ËØ∑Â°´ÂÜô‰ΩúÁî®ËåÉÂõ¥ÔºàscopeÔºâ",
    },
    {
      name: 'detail',
      type: 'input',
      message: "ËØ∑Â°´ÂÜôËØ¶ÁªÜ‰ø°ÊÅØÔºàdetailÔºâ",
    }
  ]);
  const gitManager = new GitMananger().getInstance();
  const typeInfo = TypeInfoList.find((t) => t.type === promptValues.type)
  const commitMsg = `${typeInfo.emoji} ${typeInfo.type} <${promptValues.scope}>\n${promptValues.detail}`
  console.log(commitMsg)
  await gitManager.commit(`${typeInfo.emoji} ${typeInfo.type} <${promptValues.scope}>\n${promptValues.detail}`);
}

export default main();
